<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://macclashverge.github.io/news/article-68077.htm" />
    <title>右值引用，移动语义，完美转发</title>
        <meta name="description" content="文章预先发布于：pokpok.ink  名词解释   移动语义：用不那么昂贵的操作代替昂贵的复制操作，也使得只支持移动变得可能，比如 unique_ptr，将数据的所有权移交给别人而不是多者同时引用。" />
        <link rel="icon" href="/assets/website/img/macclashverge/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Mac Clash Verge节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://macclashverge.github.io/news/article-68077.htm" />
    <meta property="og:site_name" content="Mac Clash Verge节点订阅官网" />
    <meta property="og:title" content="右值引用，移动语义，完美转发" />
    <meta property="og:image" content="https://macclashverge.github.io/uploads/20240903-2/79bf8c94c3b0891bad8acf876bb9fa14.webp" />
        <meta property="og:release_date" content="2025-03-06T11:00:12" />
    <meta property="og:updated_time" content="2025-03-06T11:00:12" />
        <meta property="og:description" content="文章预先发布于：pokpok.ink  名词解释   移动语义：用不那么昂贵的操作代替昂贵的复制操作，也使得只支持移动变得可能，比如 unique_ptr，将数据的所有权移交给别人而不是多者同时引用。" />
        
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="右值引用，移动语义，完美转发">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://cdn.bootcdn.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://fonts.gstatic.com">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.0-alpha3/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/macclashverge/vendor.css">
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/Swiper/9.4.1/swiper-bundle.min.css" />
    <link rel="stylesheet" type="text/css" href="/assets/website/css/macclashverge/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;700;900&display=swap" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-S0EZKX3Y28"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-S0EZKX3Y28');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body class="homepage" data-page="detail">
        <nav class="navbar navbar-expand-lg text-uppercase fs-6 p-3 border-bottom fixed-top bg-white">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                        <span>Mac Clash Verge</span>
                        </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasNavbarLabel">Menu</h5>
                    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <ul class="navbar-nav justify-content-end flex-grow-1 gap-1 gap-md-5 pe-3">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
            </div>
        </div>
    </nav>
    <section class="page-title mt-5 py-5">
        <div class="container">
            <div class="row">
                <div class="d-flex flex-wrap flex-column justify-content-between align-items-center mt-5">
                    <h1 class="display-5 fw-bold">右值引用，移动语义，完美转发</h1>
                    <nav class="breadcrumb">
                        <a class="breadcrumb-item" href="/">首页</a>
                        <a class="breadcrumb-item" href="/news/">新闻资讯</a>
                        <span class="breadcrumb-item active" aria-current="page">正文</span>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <section class="faqs py-5 my-5 py-5 text-dark">
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="FreeClashVerge免费节点官网" data-url="https://freeclashverge.github.io">
                  				  				  				<blockquote> <p>文章预先发布于：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pokpok.ink/c-rvalue-reference/"  target="_blank" rel="nofollow">pokpok.ink</a></p> </blockquote> <h2 id="名词解释">名词解释</h2> <ul> <li> <p>移动语义：用不那么昂贵的操作代替昂贵的复制操作，也使得只支持移动变得可能，比如 unique_ptr，将数据的所有权移交给别人而不是多者同时引用。</p> </li> <li> <p>完美转发：目标函数会收到转发函数完全相同类似的实参。</p> </li> <li> <p>右值引用：是这两个机制的底层语言机制，形式是 Type&amp;&amp;，能够引用到“不再使用”的数据，直接用于对象的构造</p> </li> </ul> <p>要注意的是，形参一定是左值，即使类型是右值引用：</p> <pre><code class="language-c++">void f(Widget&amp;&amp; w) {     /* w 在作用域内就是一个左值。 */ }</code></pre> <p>实现移动语意和完美转发的重要工具就是<code>std::move</code> 和<code>std::forward</code>，<code>std::move</code> 和<code>std::forward</code> 其实都是强制类型转换函数，<code>std::move</code> 无条件将实参转换为右值，而<code>std::forward</code> 根据实参的类型将参数类型转化为左值或者右值到目标函数。</p> <h2 id="移动语义">移动语义</h2> <p><code>std::move(v)</code> 相当于<code>static_cast&lt;T&amp;&amp;&gt;(v)</code>，强制将类型转化为需要类型的右值，move 的具体实现为：</p> <pre><code class="language-c++">template&lt;typename T&gt; typename remove_reference&lt;T&gt;::type&amp;&amp; move(T&amp;&amp; param) {     using ReturnType = typename remove_reference&lt;T&gt;::type&amp;&amp;;     return static_cast&lt;ReturnType&gt;(param); }</code></pre> <ol> <li> <p>其中<code>typename remove_reference&lt;T&gt;::type&amp;&amp;</code> 作用就是为了解决是当入参数是<code>reference to lvalue</code> 的时候，返回类型<code>ReturnType</code>会因为<code>引用折叠</code>被推导为<code>T&amp;</code>，<code>remove_reference&lt;T&gt;::type</code> 就是为了去除推导出的模版参数 T 的引用，从到强制得到<code>T&amp;&amp;</code>。</p> </li> <li> <p>如果没有<code>remove_reference&lt;T&gt;</code>，而是用<code>T&amp;&amp;</code> 来代替函数返回值以及<code>static_cast&lt;&gt;</code>，就会有下面的推导规则：</p> <ul> <li>如果入参是<code>lvalue</code>，那么<code>T</code> 就会被推导成为<code>T&amp;</code>，参数<code>param</code> 的类型就变成了<code>T&amp; &amp;&amp;</code>，再通过<code>引用折叠</code>的规则，推导最终结果为<code>T&amp;</code>，而根据表达式的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://en.cppreference.com/w/cpp/language/value_category"  target="_blank" rel="nofollow">value category</a> 规则，如果一个函数的返回值类型是左值引用，那么返回值的类型为左值，那么<code>std::move(v)</code> 就不能实现需要的功能，做到强制右值转换。</li> <li>如果入参是<code>rvalue</code>，那么<code>T</code> 会被直接推导成<code>T</code>，参数<code>param</code> 的类型也就变成了<code>T&amp;&amp;</code>，函数返回的类型(type)也是<code>T&amp;&amp;</code>，返回的值类别也是右值。</li> </ul> </li> <li> <p>此外，在 c++14 能直接将<code>typename remove_reference&lt;T&gt;::type&amp;&amp;</code> 替换为<code>remove_reference_t&lt;T&gt;&amp;&amp;</code>。</p> </li> </ol> <h2 id="完美转发">完美转发</h2> <p><code>std::forward&lt;T&gt;(v)</code> 的使用场景用于函数需要转发不同左值或者右值的场景，假设有两个重载函数：</p> <pre><code class="language-c++">void process(const Widget&amp; lvalArg); void process(Widget&amp;&amp; rvalArg);</code></pre> <p>有一个函数<code>LogAndProcess</code> 会根据<code>param</code> 左值或者右值的不同来区分调用不同函数签名的<code>process</code> 函数：</p> <pre><code class="language-c++">template&lt;typename T&gt; void LogAndProcess(T&amp;&amp; param) {     // DoSomething     logging(param);      process(std::forward&lt;T&gt;(param)); }</code></pre> <p>这样使用<code>LogAndProcess</code> 的时候就能区分：</p> <pre><code class="language-c++">Widget w; LogAndProcess(w); // call process(const Widget&amp;); LogAndProcess(std::move(w)); // call process(Widget&amp;&amp;);</code></pre> <p>这里就有 emplace_back 一种常见的用错的情况，在代码中也经常看见，如果要将某个不用的对象<code>a</code>放到<code>vector</code>中：</p> <pre><code class="language-c++">class A { 	A(A&amp;&amp; a) {} };  A a; std::vector&lt;A&gt; vec; vec.push_back(a);</code></pre> <p>如果使用<code>push_back</code> 就会造成一次拷贝，常见的错误做法是将其替换为<code>vector::emplace_back()</code>：</p> <pre><code class="language-c++">vec.emplace_back(a);</code></pre> <p>但是<code>emplace_back</code> 的实现有<code>std::forward</code> 根据实参数做转发，实参<code>a</code> 实际上是个<code>lvaue</code>，转发到构造函数时得到的也是左值的 a，就相当于调用赋值拷贝构造：</p> <pre><code class="language-c++">vec[back()] = a;</code></pre> <p>解决方法其实只需要调用<code>std::move</code> 做一次右值转换即可，就能完成数据的移动。</p> <pre><code class="language-c++">vec.emplace_back(std::move(a));</code></pre> <h2 id="万能引用和右值引用">万能引用和右值引用</h2> <p>万能引用和右值引用最大的区别在于万能引用会涉及模板的推导。但并不是说函数参数中有模板参数就是万能引用，例如<code>std::vector::push_back()</code> 的函数签名是<code>push_back(T&amp;&amp; x)</code>， 但是<code>T</code> 的类型在<code>std::vector&lt;T&gt;</code> 声明的时候就已经确定了，在调用<code>push_back</code> 的时候不会涉及类型推导，而<code>std::vector</code> 的<code>emplace_back</code> 是确实存在推导的。另外即使类型是<code>T&amp;&amp;</code>，但是如果有<code>const</code> 修饰得到<code>const T&amp;&amp;</code>，那么也不是一个合格的万能引用。</p> <p>对于万能引用，如果是入参是右值引用，模版参数<code>T</code> 的推导结果还是<code>T</code>，而不是<code>T&amp;&amp;</code>，这不是右值引用的特殊性，而是左值引用的特殊性，<br /> 模板函数的函数参数列表中包含<code>forwarding reference</code> 且相应的实参是一个<code>lvalue</code> 的情况时，模版类型会被推导为左值引用。<code>forwarding reference</code> 是 C++ 标准中的词，翻译叫转发引用；《<em>modern effective c++</em>》的作者 Scott Meyers 将这种引用称之为万能引用（universal reference）。</p> <h2 id="右值引用的重载">右值引用的重载</h2> <p>有了右值引用后，就能通过<code>std::move</code> 将左值转换为右值，完成目标对象的移动构造，省去大对象的拷贝，但是如果传递的参数是个左值，调用者不希望入参被移动，数据被移走，那就需要提供一个左值引用的版本，因为右值引用无法绑定左值。假设大对象是一个<code>string</code>，就会写出下面这种函数签名：</p> <pre><code class="language-c++">void f(const std::string&amp; s); void f(string&amp;&amp; s);</code></pre> <p>一个参数没问题，我们学会了左值和右值的区别并给出了不同的函数重载，但是如果参数是两个 string，情况就变得复杂的，针对不同的情况，就需要提供四种函数签名和实现：</p> <pre><code class="language-c++">void f(const std::string&amp; s1, const std::string&amp; s2); void f(const std::string&amp; s1, string&amp;&amp; s s2); void f(string&amp;&amp; s s1, const std::string&amp; s2); void f(string&amp;&amp; s s1, string&amp;&amp; s s2);</code></pre> <p>如果参数进一步增加，编码就会越来越复杂，遇到这种情况就可以使用万能引用处理，在函数体内对string做<code>std::forward()</code>即可：</p> <pre><code class="language-c++">template&lt;typename T1, typename T2&gt; void f(T1&amp;&amp; s1, T2&amp;&amp; s2);</code></pre> <h2 id="万能引用的重载">万能引用的重载</h2> <p>万能引用存在一个问题，过于贪婪而导致调用的函数不一定是想要的那个，假设<code>f()</code> 除了要处理左值和右值的 string 外，还有可能需要处理一个整形，例如<code>int</code>，就会有下面这种方式的重载。</p> <pre><code class="language-c++">// 万能引用版本的 f()，处理左值右值 template&lt;typename T&gt; void f(T&amp;&amp; s) {     std::cout &lt;&lt; "f(T&amp;&amp;)" &lt;&lt; std::endl; }  // 整数类型版本的 f()，处理整形 void f(int i)  {     std::cout &lt;&lt; "f(int)" &lt;&lt; std::endl; }</code></pre> <p>如果用不同的整型去调用<code>f()</code>，就会发生问题：</p> <pre><code class="language-c++">int i1; f(i1); // output: f(int)  size_t i2; f(i2); // output: f(T&amp;&amp;)</code></pre> <ul> <li>如果参数是一个<code>int</code>，那么一切正常，调用<code>f(int)</code>的版本，因为c++规定，如果一个常规函数和一个模板函数具备相同的匹配性，优先使用常规函数。</li> <li>但是如果入参是个<code>size_t</code>，那么就出现问题了，<code>size_t</code> 的类型和<code>int</code> 并不相等，需要做一些转换才能变成<code>int</code>，那么就会调用到万能引用的版本。</li> </ul> <p>如何限制万能引用呢？</p> <p>1、标签分派：根据万能引用推导的类型，<code>f(T&amp;&amp;)</code> 新增一个形参变成<code>f(T&amp;&amp;, std::true_type)</code>和<code>f(T&amp;&amp;, std::false_type)</code>，调用<code>f(args, std::is_integral&lt;T&gt;())</code> 就能正确分发到不同的<code>f()</code> 上。<br /> 2、模板禁用：<code>std::enable_if</code> 能强制让编译器使得某种模板不存在一样，称之为禁用，底层机制是<code>SFINAE</code></p> <p><code>std::_enable_if</code> 的正确使用方法为：</p> <pre><code class="language-c++">template&lt;typename T,         typename = typename std::enable_if&lt;condition&gt;::type&gt; void f(T param) {  }</code></pre> <p>应用到前面的例子上，希望整型只调用<code>f(int)</code>而 string 会调用<code>f(T&amp;&amp;)</code>，就会有：</p> <pre><code class="language-c++">void f(int i) {     std::cout &lt;&lt; "f(int)" &lt;&lt; std::endl; }  template&lt;typename T,          typename = typename std::enable_if&lt;             std::is_same&lt;                 typename std::remove_reference&lt;T&gt;::type,                  std::string&gt;::value             &gt;::type         &gt; void f(T&amp;&amp; s) {     std::cout &lt;&lt; "f(T&amp;&amp;)" &lt;&lt; std::endl; }</code></pre> <p>模板的内容看上去比较长，其实只是在<code>std::enable_if</code>的<code>condition</code>内希望入参的类型为<code>string</code>，无论左值和右值，这样就完成了一个万能引用的正确重载。</p> <h2 id="引用折叠">引用折叠</h2> <p>在c++中，引用的引用是非法的，但是编译器可以推导出引用的引用的引用再进行折叠，通过这种机制实现移动语义和完美转发。</p> <p>模板参数<code>T</code>的推导规则有一点就是，如果传参是个左值，<code>T</code>的推导类型就是<code>T&amp;</code>，如果传参是个右值，那么<code>T</code>推导结果就是<code>T</code>（不变）。引用的折叠规则也很简单，当编译器出现引用的引用后，结果会变成单个引用，在两个引用中，任意一个的推导结果为左值引用，结果就是左值引用，否则就是右值引用。</p> <h2 id="返回值优化rvo">返回值优化(RVO)</h2> <p>编译器如果要在一个按值返回的函数省略局部对象的复制和移动，需要满足两个条件：</p> <ol> <li>局部对象的类型和返回值类型相同</li> <li>返回的就是局部对象本身</li> </ol> <p>如果在<code>return</code>的时候对局部变量做<code>std::move()</code>，那么就会使得局部变量的类型和返回值类型不匹配，原本可以只构造一次的操作，变成了需要构造一次加移动一次，限制了编译器的发挥。</p> <p>另外，如果不满足上面的条件二，按值返回的局部对象是不确定的，编译器也会将返回值当作右值处理，所以对于按值返回局部变量这种情况，并不需要实施<code>std::move()</code>。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-67445.htm">宠物领养协议简单版本图片 宠物领养协议简单版本图片大全</a></p>
                                        <p>下一个：<a href="/news/article-68078.htm">Halo 开源项目学习评论与点赞</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-2-10-free-clash-verge-rev-node.htm" title="「2月10日」最高速度19.4M/S，2025年Mac Clash Verge每天更新免费机场订阅节点链接">「2月10日」最高速度19.4M/S，2025年Mac Clash Verge每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-39307.htm" title="中国宠物粮食公司排行榜前十名（中国宠物粮食公司排行榜前十名有哪些）">中国宠物粮食公司排行榜前十名（中国宠物粮食公司排行榜前十名有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-56721.htm" title="宠物粮供应商有哪些 宠物粮供应商有哪些公司">宠物粮供应商有哪些 宠物粮供应商有哪些公司</a></li>
                        <li class="py-2"><a href="/news/article-38315.htm" title="上海宠物领养基地电话号码（上海宠物领养中心电话）">上海宠物领养基地电话号码（上海宠物领养中心电话）</a></li>
                        <li class="py-2"><a href="/news/article-42775.htm" title="猫咪疫苗可以自己打嘛视频（猫咪疫苗自己打可以吗）">猫咪疫苗可以自己打嘛视频（猫咪疫苗自己打可以吗）</a></li>
                        <li class="py-2"><a href="/news/article-55050.htm" title="普通人怎么考兽医证多少钱（考一个兽医证需要什么条件）">普通人怎么考兽医证多少钱（考一个兽医证需要什么条件）</a></li>
                        <li class="py-2"><a href="/news/article-52347.htm" title="三国杀武将制作器（三国杀武将制作器最新版）">三国杀武将制作器（三国杀武将制作器最新版）</a></li>
                        <li class="py-2"><a href="/news/article-64331.htm" title="开宠物店赔钱案例分享（开宠物店的坑）">开宠物店赔钱案例分享（开宠物店的坑）</a></li>
                        <li class="py-2"><a href="/news/article-56161.htm" title="动物医院的设备叫什么 动物医院的设备叫什么名字">动物医院的设备叫什么 动物医院的设备叫什么名字</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-8-free-clash-verge-rev-node.htm" title="「3月8日」最高速度22.1M/S，2025年Mac Clash Verge每天更新免费机场订阅节点链接">「3月8日」最高速度22.1M/S，2025年Mac Clash Verge每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer id="footer" class="bg-black border-top" data-bs-theme="dark">
        <div class="border-top py-4">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p><a href="/">Mac Clash Verge节点订阅官网</a> 版权所有 Powered by WordPress</p>
                    </div>
                </div>
            </div>
        </div>
    </footer>

    <script src="/assets/website/js/frontend/macclashverge/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/macclashverge/plugins.js"></script>
    <script src="/assets/website/js/frontend/macclashverge/SmoothScroll.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.0-alpha3/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/Swiper/9.4.1/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/macclashverge/script.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>